dat$Geographical.Area<-as.factor(dat$Geographical.Area)
dat$Gross_Margin <- dat$Turnover..EURO.- dat$Cost.of.Goods.Sold..EURO.
dat$Total_Overheads <- dat$Total.Cost.of.Distribution + dat$Total.Customer...Order.Management.Costs + dat$Customer.related.Issues.Costs + dat$Total.Operations.Costs
dat$Operational_Profit <- dat$Turnover..EURO. - dat$Cost.of.Goods.Sold..EURO. - dat$Total_Overheads
dat$ROS <- dat$Operational_Profit/dat$Turnover..EURO.
View(head(dat))
summary(dat)
write.csv(dat,"FinalPMSData.csv")
dat<-read.table(file.choose(),header = T,sep = ";")
View(head(dat))
summary(dat)
dat[is.na(dat)] <- 0
dat$Plant<-as.factor(dat$Plant)
dat$Product.Line<-as.factor(dat$Product.Line)
dat$Product.Type<-as.factor(dat$Product.Type)
dat$Turnover.Range...000.EURO.<-as.factor(dat$Turnover.Range...000.EURO.)
dat$Geographical.Area<-as.factor(dat$Geographical.Area)
dat$Gross_Margin <- dat$Turnover..EURO.- dat$Cost.of.Goods.Sold..EURO.
dat$Total_Overheads <- dat$Total.Cost.of.Distribution + dat$Total.Customer...Order.Management.Costs + dat$Customer.related.Issues.Costs + dat$Total.Operations.Costs
dat$Operational_Profit <- dat$Turnover..EURO. - dat$Cost.of.Goods.Sold..EURO. - dat$Total_Overheads
dat$ROS <- dat$Operational_Profit/dat$Turnover..EURO.
View(head(dat))
summary(dat)
write.csv(dat,"FinalPMSData.csv")
rm(list=ls())
dat<-read.table(file.choose(),header = T)
summary(dat)
dat<-read.table(file.choose(),header = T,sep = "?")
summary(dat)
dat<-read.table(file.choose(),header = T,sep = ".")
summary(dat)
dat<-read.table("C:\Users\moham\Desktop\PYTHON_STUFF\DataMining\OfficialClass\a.csv",header = T,sep = ",")
dat<-read.table("C:\\Users\\moham\\Desktop\\PYTHON_STUFF\\DataMining\\OfficialClass\\a.csv",header = T,sep = ",")
summary(dat)
dat<-read.table(file.choose(),header = T,sep = ",")
summary(dat)
dat<-read.table(file.choose(),header = T,sep = ",")
dat<-read.table(file.choose(),header = T,sep = "?")
summary(dat)
dat<-read.table(file.choose(),header = T,sep = ".")
summary(dat)
dat<-read.table(file.choose(),header = T,sep = ",")
summary(dat)
dat[dat != "?", ]
dat=dat[dat != "?", ]
summary(dat)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
dat<-read.csv(file.choose(),header=TRUE)
summarey(dat$ROS)
summary(dat$ROS)
19837/32790
25127/32379
source("Libraries.R")
dat<-read.table(file.choose(),header = T,sep = ";")
View(head(dat))
sum(dat$Quantity..units.)
sum(dat$Turnover..EURO.)
summary(dat)
dat[is.na(dat)] <- 0
dat$Plant<-as.factor(dat$Plant)
dat$Product.Line<-as.factor(dat$Product.Line)
dat$Product.Type<-as.factor(dat$Product.Type)
dat$Turnover.Range...000.EURO.<-as.factor(dat$Turnover.Range...000.EURO.)
dat$Geographical.Area<-as.factor(dat$Geographical.Area)
dat$Gross_Margin <- dat$Turnover..EURO.- dat$Cost.of.Goods.Sold..EURO.
dat$Total_Overheads <- dat$Total.Cost.of.Distribution + dat$Total.Customer...Order.Management.Costs + dat$Customer.related.Issues.Costs + dat$Total.Operations.Costs
dat$Total_Overheads <- dat$Total.Cost.of.Distribution + dat$Total.Customer...Order.Management.Costs + dat$Customer.related.Issues.Costs + dat$Total.Operations.Costs
dat$Operational_Profit <- dat$Turnover..EURO. - dat$Cost.of.Goods.Sold..EURO. - dat$Total_Overheads
names(dat)<-c("Material_Code","Plant","Customer_Code","Quantity_units","Turnover_EURO","Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Sales_Transportation","Packing","Distribution_Activities","Trading_Transportation","Custom_Duties_Trading","Warehouse_Rent","Outbound_Logistics_Local_Branches","Total_Customer_Order_Management_Costs","Sales_Comissions","Sales_Development","Offer_Development","Order_Management","Customer_Service","Manage_Account_Receivables","Customer_Order_Management_Local_Branches","Customer_related_Issues_Costs","Rebate","Bad_Debt","Cost_of_Poor_Quality","Total_Operations_Costs","Manufacturing_Costs","Internal_Logistics_Costs","Supply_Chain_Management_Costs","Transportations","Manage_Orders_to_Suppliers","Inbound_Logistics","Inspect_goods","Manage_Foreign_Relationships","Product_Line","Product_Type","N_Parts","Assembly_Labour_Minutes","Machinery_Minutes","Number_of_Deliveries","Average_Delivery_Batch_Size_units","Customer_Class","Turnover_Range_EURO","Geographical_Area","Gross_Margin","Total_Overheads","Operational_Profit")
View(head(dat))
summary(dat)
dat$Assembly_Labour_Minutes<-as.numeric(dat$Assembly_Labour_Minutes)
dat$Machinery_Minutes<-as.numeric(dat$Machinery_Minutes)
dat[is.na(dat)] <- 0
summary(dat)
write.csv(dat,"FinalPMSData.csv")
summary(dat)
write.csv(dat,"FinalPMSData.csv")
write.csv(dat,"FinalPMSData.csv")
dat$Turnover_EURO_Unit<-Turnover_EURO/Quantity_units
summary(dat)
dat$Turnover_EURO_Unit<-dat$Turnover_EURO/dat$Quantity_units
dat$Cost_of_Goods_Sold_EURO_Unit<-dat$Cost_of_Goods_Sold_EURO/dat$Quantity_units
dat$Total_Cost_of_Distribution_Unit<-dat$Total_Cost_of_Distribution/dat$Quantity_units
dat$Total_Customer_Order_Management_Costs_Unit<-dat$Total_Customer_Order_Management_Costs/dat$Quantity_units
dat$Customer_related_Issues_Costs_Unit<-dat$Customer_related_Issues_Costs/dat$Quantity_units
dat$Total_Operations_Costs_Unit<-dat$Total_Operations_Costs/dat$Quantity_units
dat$Gross_Margin_Unit<-dat$Gross_Margin/dat$Quantity_units
dat$Total_Overheads_Unit<-dat$Total_Overheads/dat$Quantity_units
dat$Operational_Profit_Unit<-dat$Operational_Profit/dat$Quantity_units
write.csv(dat,"FinalPMS_UnitINC_Data.csv")
NameList <- c("Material_Code","Plant","Customer_Code","Quantity_units","Turnover_EURO",
"Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs","Customer_related_Issues_Costs",
"Total_Operations_Costs","Product_Line","Product_Type","N_Parts",
"Number_of_Deliveries","Customer_Class","Turnover_Range_EURO","Geographical_Area",
"Gross_Margin","Total_Overheads","Operational_Profit","Turnover_EURO_Unit",
"Cost_of_Goods_Sold_EURO_Unit","Total_Cost_of_Distribution_Unit",
"Total_Customer_Order_Management_Costs_Unit","Customer_related_Issues_Costs_Unit",
"Total_Operations_Costs_Unit","Gross_Margin_Unit","Total_Overheads_Unit",
"Operational_Profit_Unit")
idx <- match(NameList, names(dat))
idx <- sort(c(idx-1, idx))
train <- dat[,idx]
View(head(train))
set.seed(999)
boruta.train <- Boruta(Cost_of_Goods_Sold_EURO~., data = train, doTrace = 2)
print(boruta.train)
plot(boruta.train, xlab = "", xaxt = "n")
lz<-lapply(1:ncol(boruta.train$ImpHistory),function(i)
boruta.train$ImpHistory[is.finite(boruta.train$ImpHistory[,i]),i])
names(lz) <- colnames(boruta.train$ImpHistory)
Labels <- sort(sapply(lz,median))
axis(side = 1,las=2,labels = names(Labels),
at = 1:ncol(boruta.train$ImpHistory), cex.axis = 0.7)
View(head(train))
idx
unique(idx)
train <- dat[,unique(idx)]
write.csv(boruta.df,"BorutaResults_Unit.csv")
final.boruta <- TentativeRoughFix(boruta.train)
print(final.boruta)
boruta.df <- attStats(final.boruta)
print(boruta.df)
write.csv(boruta.df,"BorutaResults_Unit.csv")
rm(list=ls())
library(shiny); runApp('Shiny_Framework.R')
install.packages('plotly')
library(shinydashboard)
library(plotly)
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
runApp('Shiny_Framework.R')
rm(list=ls())
source("Libraries.R")
dat<-read.table(file.choose(),header = T,sep = ";")
sum(dat$Quantity..units.)
sum(dat$Turnover..EURO.)
dat[is.na(dat)] <- 0
dat$Plant<-as.factor(dat$Plant)
dat$Product.Line<-as.factor(dat$Product.Line)
dat$Product.Type<-as.factor(dat$Product.Type)
dat$Turnover.Range...000.EURO.<-as.factor(dat$Turnover.Range...000.EURO.)
dat$Geographical.Area<-as.factor(dat$Geographical.Area)
dat$Gross_Margin <- dat$Turnover..EURO.- dat$Cost.of.Goods.Sold..EURO.
dat$Total_Overheads <- dat$Total.Cost.of.Distribution + dat$Total.Customer...Order.Management.Costs + dat$Customer.related.Issues.Costs + dat$Total.Operations.Costs
dat$Operational_Profit <- dat$Turnover..EURO. - dat$Cost.of.Goods.Sold..EURO. - dat$Total_Overheads
names(dat)<-c("Material_Code","Plant","Customer_Code","Quantity_units","Turnover_EURO","Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution","Sales_Transportation","Packing","Distribution_Activities","Trading_Transportation","Custom_Duties_Trading","Warehouse_Rent","Outbound_Logistics_Local_Branches","Total_Customer_Order_Management_Costs","Sales_Comissions","Sales_Development","Offer_Development","Order_Management","Customer_Service","Manage_Account_Receivables","Customer_Order_Management_Local_Branches","Customer_related_Issues_Costs","Rebate","Bad_Debt","Cost_of_Poor_Quality","Total_Operations_Costs","Manufacturing_Costs","Internal_Logistics_Costs","Supply_Chain_Management_Costs","Transportations","Manage_Orders_to_Suppliers","Inbound_Logistics","Inspect_goods","Manage_Foreign_Relationships","Product_Line","Product_Type","N_Parts","Assembly_Labour_Minutes","Machinery_Minutes","Number_of_Deliveries","Average_Delivery_Batch_Size_units","Customer_Class","Turnover_Range_EURO","Geographical_Area","Gross_Margin","Total_Overheads","Operational_Profit")
View(head(dat))
summary(dat)
dat$Assembly_Labour_Minutes<-as.numeric(dat$Assembly_Labour_Minutes)
dat$Machinery_Minutes<-as.numeric(dat$Machinery_Minutes)
dat[is.na(dat)] <- 0
summary(dat)
write.csv(dat,"FinalPMSData.csv")
dat$Turnover_EURO_Unit<-dat$Turnover_EURO/dat$Quantity_units
dat$Cost_of_Goods_Sold_EURO_Unit<-dat$Cost_of_Goods_Sold_EURO/dat$Quantity_units
dat$Total_Cost_of_Distribution_Unit<-dat$Total_Cost_of_Distribution/dat$Quantity_units
dat$Total_Customer_Order_Management_Costs_Unit<-dat$Total_Customer_Order_Management_Costs/dat$Quantity_units
dat$Customer_related_Issues_Costs_Unit<-dat$Customer_related_Issues_Costs/dat$Quantity_units
dat$Total_Operations_Costs_Unit<-dat$Total_Operations_Costs/dat$Quantity_units
dat$Gross_Margin_Unit<-dat$Gross_Margin/dat$Quantity_units
dat$Total_Overheads_Unit<-dat$Total_Overheads/dat$Quantity_units
dat$Operational_Profit_Unit<-dat$Operational_Profit/dat$Quantity_units
write.csv(dat,"FinalPMS_UnitINC_Data.csv")
View(head(dat))
NameList <- c("Material_Code","Plant","Customer_Code","Quantity_Units","Cost_of_Goods_Sold_EURO","
Product_Line","Product_Type","Customer_Class","Turnover_Range_EURO","Geographical_Area","
Turnover_EURO_Unit","Cost_of_Goods_Sold_EURO_Unit","Total_Cost_of_Distribution_Unit","
Total_Customer_Order_Management_Costs_Unit","Customer_related_Issues_Cost_Unit","
Total_Operations_Costs_Unit","Gross_Margin_Unit","Total_Overheads_Unit","Operational_Profit_Unit")
NewDF <- dat[,colnames(df) %in% NameList]
View(head(dat))
View(head(NewDF))
colnames(df) %in% NameList
colnames(df)
colnames(dat)
NewDF <- dat[,colnames(dat) %in% NameList]
View(head(NewDF))
write.csv(NewDF,"Only_UnitINC_Data.csv")
write.csv(NewDF,"Only_UnitINC_Data.csv")
rm(list=ls())
source("Libraries.R")
dat<-read.csv("FinalPMSData.csv",header = T)
dat<-dat[,-1]
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_EURO
+Total_Cost_of_Distribution+Total_Customer_Order_Management_Costs+
+Total_Operations_Costs,dat=ndat)
NameList <- c("Material_Code","Plant","Customer_Code","Quantity_units","Turnover_EURO",
"Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs","Customer_related_Issues_Costs",
"Total_Operations_Costs","Product_Line","Product_Type","Number_of_Deliveries",
"Average_Delivery_Batch_Size_units","Customer_Class","Turnover_Range_EURO",
"Geographical_Area","Gross_Margin","Total_Overheads","Operational_Profit")
ndat <- dat[,colnames(dat) %in% NameList]
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_EURO
+Total_Cost_of_Distribution+Total_Customer_Order_Management_Costs+
+Total_Operations_Costs,dat=ndat)
summary(mlr)
setwd("D:/MDS/PMS/PMS_Analysis")
View(head(dat))
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_EURO
+Total_Cost_of_Distribution+
+Total_Operations_Costs+Product_Line+Product_Type,dat=ndat)
summary(mlr)
as.factor(dat$Product_Line)
len(as.factor(dat$Product_Line))
size(as.factor(dat$Product_Line))
count(as.factor(dat$Product_Line))
unique(as.factor(dat$Product_Line)
)
unique(as.factor(dat$Product_Type))
by_cyl <- dat["Product_Line"] %>% group_by(Cost_of_Goods_Sold_EURO)
aggregate(dat$Cost_of_Goods_Sold_EURO, by=list(Category=dat$Product_Line), FUN=sum)
aggregate(dat$Turnover_EURO, by=list(Category=dat$Product_Line), FUN=avg)
aggregate(dat$Turnover_EURO, by=list(Category=dat$Product_Line), FUN=mean)
rm(list=ls())
source("Libraries.R")
dat<-read.csv("FinalPMSData.csv",header = T)
dat<-dat[,-1]
summary(dat)
NameList <- c("Material_Code","Plant","Customer_Code","Quantity_units","Turnover_EURO",
"Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs","Customer_related_Issues_Costs",
"Total_Operations_Costs","Product_Line","Product_Type","Number_of_Deliveries",
"Average_Delivery_Batch_Size_units","Customer_Class","Turnover_Range_EURO",
"Geographical_Area","Gross_Margin","Total_Overheads","Operational_Profit")
ndat <- dat[,colnames(dat) %in% NameList]
View(head(ndat))
cor(ndat$Cost_of_Goods_Sold_EURO,ndat$Total_Cost_of_Distribution, method = "pearson")
modelSLR <- lm(ndat$Cost_of_Goods_Sold_EURO~ndat$Total_Cost_of_Distribution)
modelSLR
cor(ndat$Cost_of_Goods_Sold_EURO,ndat$Total_Cost_of_Distribution, method = "pearson")
summary(modelSLR)
cor(ndat$Cost_of_Goods_Sold_EURO,ndat$Total_Cost_of_Distribution, method = "pearson")
summary(modelSLR)
cor(ndat$Cost_of_Goods_Sold_EURO,ndat$Customer_related_Issues_Costs, method = "pearson")
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_EURO
+Total_Cost_of_Distribution+
+Total_Operations_Costs+Product_Line+Product_Type,dat=ndat)
summary(mlr)
View(head(dat))
dat$Geographical_Area<-as.factor(dat$Geographical_Area)
summary(dat$Geographical_Area)
dat$Customer_Class<-as.factor(dat$Customer_Class)
summary(dat$Customer_Class)
dat$Turnover_Range_EURO<-as.factor(dat$Turnover_Range_EURO)
summary(dat$Turnover_Range_EURO)
dat$Plant<-as.factor(dat$Plant)
summary(dat$Plant)
mlr<-lm(Cost_of_Goods_Sold_EURO~Plant
+Turnover_Range_EURO+Geographical_Area+
+Customer_Class+Product_Line+Product_Type,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Plant+Turnover_Range_EURO+
+Turnover_Range_EURO+Geographical_Area+
+Customer_Class+Product_Line+Product_Type,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_Range_EURO+
+Turnover_Range_EURO+Geographical_Area+
+Customer_Class+Product_Line+Product_Type,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Plant
+Turnover_Range_EURO+
+Customer_Class+Product_Line+Product_Type,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Plant
+Turnover_Range_EURO+Geographical_Area+
Product_Line+Product_Type,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_Range_EURO+Product_Line+Product_Type,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_Range_EURO,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_EURO,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_EURO+Geographical_Area,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_EURO+Geographical_Area
+Customer_Class,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_EURO+Geographical_Area
+Customer_Class+Turnover_Range_EURO,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_EURO+Geographical_Area
+Customer_Class+Turnover_Range_EURO+Plant,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Turnover_EURO+Geographical_Area
+Customer_Class+Turnover_Range_EURO+Plant+Product_Line+Product_Type,dat=dat)
summary(mlr)
mlr<-lm(Cost_of_Goods_Sold_EURO~Gross_margin+Geographical_Area
+Customer_Class+Turnover_Range_EURO+Plant+Product_Line+Product_Type,dat=dat)
mlr<-lm(Cost_of_Goods_Sold_EURO~Gross_Margin+Geographical_Area
+Customer_Class+Turnover_Range_EURO+Plant+Product_Line+Product_Type,dat=dat)
summary(mlr)
dat$Geographical_Area<-as.factor(dat$Geographical_Area)
dat$Geographical_Area<-as.factor(dat$Geographical_Area)
#=============================================================================
# Now we know that these are the best cost drivers ! but we cannot determine a new customer
# by how much he will cost
# We know a knew customer by his geographical area
dat$Geographical_Area<-as.factor(dat$Geographical_Area)
summary(dat$Geographical_Area)
# We know a knew customer by class and by Turnoverrange
dat$Customer_Class<-as.factor(dat$Customer_Class)
summary(dat$Customer_Class)
dat$Turnover_Range_EURO<-as.factor(dat$Turnover_Range_EURO)
summary(dat$Turnover_Range_EURO)
# and the plant that will be closest to him (Assuming)
dat$Plant<-as.factor(dat$Plant)
summary(dat$Plant)
mlr<-lm(Cost_of_Goods_Sold_EURO~Gross_Margin+Geographical_Area
+Customer_Class+Turnover_Range_EURO+Plant+Product_Line+Product_Type,dat=dat)
summary(mlr)
save(mlr, file = "FinalPredModel.rda")
rm(mlr)
load("FinalPredModel.rda")
summary(mlr)
library(shiny); runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
dat$Geographical_Area<-as.factor(dat$Geographical_Area)
summary(dat$Geographical_Area)
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
dat$Customer_Class<-as.factor(dat$Customer_Class)
summary(dat$Customer_Class)
dat$Turnover_Range_EURO<-as.factor(dat$Turnover_Range_EURO)
summary(dat$Turnover_Range_EURO)
dat$Plant<-as.factor(dat$Plant)
summary(dat$Plant)
dat$Plant<-as.factor(dat$Product_Line)
summary(dat$Plant)
dat$Plant<-as.factor(dat$Product_Type)
summary(dat$Plant)
rm(list=ls())
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
source("Libraries.R")
dat<-read.csv("FinalPMSData.csv",header = T)
dat<-dat[,-1]
data$Plant[1]
data[1,1]
dat[1,1]
print(dat[1,1])
print(dat$Plant[1])
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
data$Plant[1]
dat$Plant[1]
a<-dat$Plant[1]
a
dat$Total_Cost_of_Distribution[1]
infoBox("Machine has thought rmse is : ",data$Total_Cost_of_Distribution[1], icon = icon("thumbs-up", lib = "glyphicon"),color = "red")
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
toString(dat$Total_Cost_of_Distribution[1])
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
dat$Total_Cost_of_Distribution[1]
str(dat$Total_Cost_of_Distribution[1])
String(dat$Total_Cost_of_Distribution[1])
string(dat$Total_Cost_of_Distribution[1])
tostring(dat$Total_Cost_of_Distribution[1])
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
a
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
paste("You have selected",a)
a<-toString(dat$Total_Cost_of_Distribution[1])
str1 <- paste("You have selected",a)
str1
HTML(paste(str1,sep = '<br/>'))
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
c("a",1)
predict(mlr,c(474,"FRA","Strategic","Strategic","IND","Northern Italy","Plugs and Caps","Spare Parts"))
predict(mlr,dat)
predict(mlr,as.matrix(474,"FRA","Strategic","Strategic","IND","Northern Italy","Plugs and Caps","Spare Parts"))
library(caret)
predict(mlr,as.matrix(474,"FRA","Strategic","Strategic","IND","Northern Italy","Plugs and Caps","Spare Parts"))
predict(mlr)
predict(mlr,dat[1])
pred<-predict(mlr,as.matrix(474,"FRA","Strategic","Strategic","IND","Northern Italy","Plugs and Caps","Spare Parts"))
#Author @ Mohammed 26/01/2017
#Code used to Fetch/install/Load all libraries required
print("============== Beginning to load libraries  ===================")
setwd("D:/RPROJECTS/PMS_FINAL_Project")
#Function To check if
checkInstallLoad <- function(libName)
{
if(!require(libName, character.only=TRUE))
{
install.packages(libName)
require(libName, character.only=TRUE)
}
}
#Calling the libraries for Decision tree
checkInstallLoad("RWeka")
checkInstallLoad("partykit")
#calling the libraries for Logistic Regression
checkInstallLoad("car")
#calling the libraries for Naive Bayes
checkInstallLoad("e1071")
#calling the libraries for Random forest
checkInstallLoad("class")
checkInstallLoad("data.table")
checkInstallLoad("Matrix")
checkInstallLoad("YaleToolkit")
checkInstallLoad("Amelia")
checkInstallLoad("Metrics")
checkInstallLoad("plyr")
checkInstallLoad("dplyr")
checkInstallLoad("stringr")
checkInstallLoad("lubridate")
checkInstallLoad("ggplot2")
checkInstallLoad("plot3D")
checkInstallLoad("pROC")
checkInstallLoad("caret")
checkInstallLoad("caretEnsemble")
checkInstallLoad("e1071")
checkInstallLoad("randomForest")
checkInstallLoad("xgboost")
checkInstallLoad("rpart")
checkInstallLoad("C50")
checkInstallLoad("adabag")
checkInstallLoad("arules")
checkInstallLoad("ROCR")
checkInstallLoad("nnet")
checkInstallLoad("car")
checkInstallLoad("Ckmeans.1d.dp")
checkInstallLoad("psych")
#For Boruta
checkInstallLoad("Boruta")
#For Smote
checkInstallLoad("DMwR")
print("============== Completed loading libraries  ===================")
predict(mlr,c(474,"FRA","Strategic","Strategic","IND","Northern Italy","Plugs and Caps","Spare Parts"))
mlr<-lm(Cost_of_Goods_Sold_EURO~Gross_Margin+Geographical_Area
+Customer_Class+Turnover_Range_EURO+Plant+Product_Line+Product_Type,dat=dat)
summary(mlr)
predict(mlr,c(474,"FRA","Strategic","Strategic","IND","Northern Italy","Plugs and Caps","Spare Parts"))
mlr<-lm(Cost_of_Goods_Sold_EURO~Gross_Margin,data=dat)
summary(mlr)
predict(mlr,474)
predict(mlr,as.numeric(474))
predict(mlr, newdata = data.frame(7))
predict(mlr, newdata = data.frame(Gross_Margin=7))
mlr<-lm(Cost_of_Goods_Sold_EURO~Gross_Margin+Geographical_Area
+Customer_Class+Turnover_Range_EURO+Plant+Product_Line+Product_Type,dat=dat)
predict(mlr,newdata=data.frame(Gross_Margin=474,
Geographical_Area="FRA",Customer_Class="Strategic",
Turnover_Range_EURO="Strategic",Plant="Northern Italy",
Product_Line="Plugs and Caps",Product_Type="Spare Parts"))
predict(mlr,newdata=data.frame(Gross_Margin=474,
Geographical_Area="FRA",Customer_Class="Strategic",
Turnover_Range_EURO="Strategic",Plant="Northern Italy",
Product_Line="Plugs and Caps",Product_Type="Spare Parts"))
predict(mlr,newdata=data.frame(Gross_Margin=474,
Geographical_Area="FRA",Customer_Class="Strategic",Turnover_Range_EURO="Strategic",Plant="Northern Italy",Product_Line="Plugs and Caps",Product_Type="Spare Parts"))
a<-predict(mlr,newdata=data.frame(Gross_Margin=474,
Geographical_Area="FRA",Customer_Class="Strategic",Turnover_Range_EURO="Strategic",Plant="Northern Italy",Product_Line="Plugs and Caps",Product_Type="Spare Parts"))
a
a[1]
toString(a)
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
runApp('D:/MDS/PMS/PMS_Analysis/Shiny_Framework.R')
install.packages('rsconnect')
library(rsconnect)
if(!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
rsconnect::setAccountInfo(name='mohammedtopiwalla', token='080A67059629510A9357C6F9B0825017', secret='HFpYDP758E2rLa+akLsJhZvDWw06ezV3oidUw4FK')
if(!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
install.packages("digest")
install.packages("digest")
if(!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
library(digest)
install.packages("digest")
install.packages("digest")
if(!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
rsconnect::setAccountInfo(name='mohammedtopiwalla', token='080A67059629510A9357C6F9B0825017', secret='HFpYDP758E2rLa+akLsJhZvDWw06ezV3oidUw4FK')
deployApp()
library(rsconnect)
deployApp()
rm(list=ls())
source("Libraries.R")
dat<-read.csv("FinalPMSData.csv",header = T)
dat<-dat[,-1]
NameList <- c("Material_Code","Plant","Customer_Code","Quantity_units","Turnover_EURO",
"Cost_of_Goods_Sold_EURO","Total_Cost_of_Distribution",
"Total_Customer_Order_Management_Costs","Customer_related_Issues_Costs",
"Total_Operations_Costs","Product_Line","Product_Type","Number_of_Deliveries",
"Average_Delivery_Batch_Size_units","Customer_Class","Turnover_Range_EURO",
"Geographical_Area","Gross_Margin","Total_Overheads","Operational_Profit")
ndat <- dat[,colnames(dat) %in% NameList]
plot(dat$Total_Cost_of_Distribution,ndat$Cost_of_Goods_Sold_EURO)
max(ndat$Cost_of_Goods_Sold_EURO)
max(ndat$Total_Cost_of_Distribution)
ndat[ndat$Total_Cost_of_Distribution==max(ndat$Total_Cost_of_Distribution),]
rm(list=ls())
